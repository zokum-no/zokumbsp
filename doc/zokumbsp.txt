Author
======

(c) 2016-2017 Kim Roar Fold√∏y Hauge
(c) 1995-2004 Marc Rousseau (ZenNode base)

Description
===========

ZokumBSP is an advanced node/blockmap/reject builder for Id tech 1 games such
as Doom, Doom 2, Final Doom, Heretic, Hexen, Strife, Hacx. It is based on
ZenNode 1.2.0 and available from Git Hub and as a binary release for select
operating systems.

This is an experimental Doom tool, expect the occasional bug when using new
features. The tool allows for the construction of bigger and more complex maps
than ZenNode and many other similar tools.

It has port-specific handling, but the main development is for vanilla 1.9
executables and Chocolate Doom.

Index
=====

01. Project goals
02. Basic usage
03. Doom V1.9 limits / algorithms
04. Special effects
05. Linedef specials
06. Geometry pass
07. Blockmap builder
08. Nodes builder
09. Reject builder
10. Other options
11. Compatibility
12. Usage together with other tools
13. Other resources
14. Changelog
15. Acknowledgements.
16. Other node builders.

Section 01: Project goals
=========================

The main goal of ZokumBSP was to provide a node builder that is compatible
with ZenNode and the classic version 1.9 Doom 2 executable, referred to in
this document as classic Doom. Support for other source ports, feature and 
limit wise is within the goal as long as it doesn't interfere with classic
Doom support.

01:01 Non-Doom games
--------------------

Hexen, Heretic and Strife etc support is within the scope of the project as
nice-to-have, the features for these executables that already exist in the
game will be kept, but not tested when new code is added due to the added
complexity this would cause.

01:02 Slot in for ZenNode
-------------------------

An important aspect of ZokumBSP is to be a slot-in-replacement for ZenNode.
One should be able to run it with the exact same paramaters as ZenNode and get
a comparable result, hopefully with a better runtime performance or a better
built structure.

01:03 Bigger and more complex maps in classic Doom
--------------------------------------------------

One important goal of the project is to enable mappers to make maps that are
bigger and more complex than other similar tools can do and still stay
playable in classic doom. 

01:04 Advanced and novel special effects
----------------------------------------

Finally, by adding more switches, options and tweaks, the tool should enable
mappers to add new special effects that rely on the final data structure
output from the tool to have certain properties.

Section 02: Basic usage
=======================

02:01 Basic syntax
------------------

The basic usage is just like ZenNode, although some argument parsing bugs has
been cleaned up to allow for the addition of other parameters.

To build a map for use in Doom, simply invoke: "zokumbsp mapfile.wad" where
you substitute mapfile.wad with the name of your map.

02:02 Help screen
-----------------

You can see a help screen with a terse command overview by simply invoking
ZokumBSP without any arguments.

The help screen has more lines than a standard 25 line terminal, so the use of
a higher-resolution terminal or a scrollback buffer is recommended to see all
the available information.

02:03 Supported arguments / switches
------------------------------------

Most supported parameters are explained in sections 5 to 10.

Section 03: Doom v1.9 limits / algorithms
=========================================

There are a number of limitations size wise for a Doom map, and this document
won't cover all of them, only the ones that are relevant to a node, blockmap
and reject builder.

03:01 Sidedefs
--------------

A map can't contain more than 32768 sidedefs. A tool called dshrink can reduce
the amount of sidedefs by combining identical side defs. For very big maps,
the usage of this tool in addition to ZokumBSP could make maps not normally
playable in Doom playable. Some ports have changed the sidedef limit to 65536.

03:02 Linedefs
--------------

The limit of linedefs is the same as sidedefs. It is possible to have more
linedefs than sidedefs if dshrink is used to compress the map. There isn't
much that can be done about this static limit. It should be noted that turning
on geometric simplification compression can increase the number of linedefs,
possibly leading to a map that will crash Doom. 

TODO: Fix max-linedefs limit crash bug!

03:03 Segs
----------

Segs are linedef segments and are used by the rendering part of the engine.
The limit is a 32768 segs. At least one seg is created for every linedef, two
for a two-sided linedef etc. Additional segs are also created as part of the
node building process, this happens when the node builder splits a sector into
smaller subsectors, creating a new seg where a line is split. Different
partitioning algorithms can change the amount of segs in a map. For more
information about segs-count manipulation, see the special effects chapter of
the manual.

03:04 Vertices
--------------

The limit for vertices is the same as many other structures, 32768. It should
be noted that a node builder will add vertices to a map when it splits a seg
into several segs as part of the node building process. All node builders do
this. It is theoretically possible to create a map with more vertices than
segs or linedefs, but in practice this is very rare. This is most easily done
by adding a lot of two-sided lines in the middle of a sector where both sides
belong to the same sector. These lines can then be used for trigger lines, but
will not generate segs, and with 2 vertices per line, it can theoretically go
over the limit.

Section 04: Special effects
===========================

04:01 Invisible floors / deep water
-----------------------------------

Adding a sector inside another with sector references on both sidedefs of all
the involved linedefs in the new sector, will make it act as a height changing
sector compare to the rendered floor. If a the invisible sector has a lower
floor level it can be used for a deep water styele effect, where it looks like
one is wading in deeper water. It should be noted that things like trees,
monsters, players are drawn completely, ruining the effect so use this
sparingly in areas where you can see other players or monsters inside that
area.

For invisible floors, there are no clipping problems, but be aware that stairs
are hard for monsters to ascend and descend if the height difference is too
big.

04:02 Do not add to blockmap - 'tag 999'
----------------------------------------

Linedefs tagged with the tag 999 will not be added to the blockmap, this can
allow you to add architecture that will not incrase the blockmap. If used
correctly, this can lower the size of the blockmap. In Doom a lot of the
architecture is mainly for decoration, often only in the ceiling. Since one
cannot look up or down, it is in most cases impossible or very hard to hit
these lines. Adding such lines will allow for nice architecture without making
the blockmap bigger, making it possible to put more architecture into a map
than what would normally be possible. This will also speed up collision
detection and in some ports the line of sight calculations. This is due to the
reduced amount of linedef the engine has to check in an area.

04:03 No render tag for linedef - 'tag 998'
-------------------------------------------

By setting the tag to 998 on a linedef, this line will not be rendered by the
Doom engine. More specifically, this will not create a seg out of that
linedef. This can be used to add impassible lines and manually simplified
geometry. See the next section for more information.

04:04 Manually simplified geometry
----------------------------------

By using a combination of blockmap only lines and rendering only geometry the
size of the blockmap can be reduced. If one has a rounded corner that consists
of 16 linedefs, one could surround that corner, possibly reuse vertices to
only 4 collissionable linedefs. Another good example would be simplifying
geometry one is never near into simpler shapes, and flag the more complicated
geoemtry just behind as non-collidable. This will ensure that stray projctiles
and shots are still colliding, but not at the exact location of the rendered
geometry.

Section 05: Linedef specials
============================

05:01 Floor specials speed differences
--------------------------------------

The normal speed is the speed most floors move up or down at, however, some
types move faster or slower than this speed. 

These are the ones in Doom 2 that do not mover at the regular speed.

Numeric Type Speed      Units per tic   Effect
7       S1   Very slow  2               Raising stairs, 8 height
9       S1   Slow       4               Donut
20      S1   Slow       4               Raise floor next higher floor, texture
22      W1   Slow       4               Raise floor next higher floor, texture
36      W1   Very fast  32              Lower floor 8 above highest
68      SR   Slow       4               Raise floor next higher, texture
70      SR   Very fast  32              Lower floor 8 above highest
71	S1   Very fast  32              Lower floor 8 above highest n. floor
98      WR   Very fast  32              Lower floor 8 above highest n. floor 
100     W1   Very fast  32              Raising stairs, 16 height
127	S1   Very fast  32              Raising stairs, 16 height
129     WR   Very fast  32              Raise floor to next higher floor
130     W1   Very fast  32              Raise floor to next higher floor
131	S1   Very fast  32              Raise floor to next higher floor
132     SR   Very fast  32              Raise floor to next higher floor

Section 06: Geometry pass
=========================

The geometry pass is a pass one the level done before the blockmap, nodes and
reject maps are done. It will find the basic dimensions of the map and will
also apply some geometry changes used by later steps like the blockmap, nodes
and reject steps to produce a smaller blockmap and better node tree etc.

Currently the only geometry change possible is the collission geometry step,
which is outlined in the blockmap builder chapter.

Section 07: Blockmap builder
============================

The blockmap is a data structure that is part of the map format. It is a
lookup table where the engine can quickly see which lines are in a given area
when performaing collission detection.

The blockmap builder has gone through a very substantial update of the old
ZenNode base. There are a lot of new options available. 

All blockmap parameters must follow after the main -b parameter. Typically
something like -bo=1s=0g=2.

The blockmap is rebuilt by default, to turn this off, invoke ZokumBSP with the
paramter "-b-".

The blockmap consists of a small header that gives the dimensionns and
coordinate system of the map, a set of 2-byte values that represent a grid of
128 by 128 game units with the values being addresses of a list of linedefs
that exist in that specific block.

It is possible to exceed the maximum size of a classic Doom blockmap purely by
having a too large grid. The exact size of the blockmap is undefined, due to
the addresses of the start of the list can only be within 65536 bytes. A list
can be of variable length, with the list entries extending beyond 65536 bytes.

07:01 'c' - Compress BLOCKMAP
-----------------------------

This turns on basic compression of the blockmap. This makes identical lists
only appear once in the blockmap. The code in ZokumBSP performs a better
search than ZenNode, and will yield a better result in many cases due to
checking more eligible lists. ZenNode would mostly find identical lists from
the same row, but not same column or diagonally.

07:02 'h' - Output BLOCKMAP data as HTML.
-----------------------------------------

This will oputput a simple html output to the standard output. On a unix-like
operation system, this output can be piped into a file, and with some minor
edits of the file, produce a color coded visualization of the offset addresses
in the grid part of the blockmap. 

07:03 'i' - Id compatible BLOCKMAP. Sets 'o=1n=2' and 'c-s-r-'
-------------------------------------------------------------

This switch will turn on and off several other switches and options for the
blockmap in order to attempt to produce blockmaps that are demo compatible
with the ones produced by Id's DoomBSP tool. Although they are compressed
unlike Id's many off the advanced techniques are disabled and the grid offset
is always set to 8,8 compare to the bottom most and left most vertex. 

It should be noted that not all IWAD maps have been built with DoomBSP, and
using it on these maps could break demo compability. This most likely applies
to: 

Ultimate Doom: e4m7.
Doom 2: None of the maps.
Final Doom TNT.wad: All the maps.
Final Doom Plutonia.wad: All the maps.

The following pwad is built with DoomBSP:
id Map01 idmap01.wad: map01

07:04 'o' -Offset configuration.
--------------------------------

The 128x128 grid offset can start at any arbitrary location, but due to the
size, anything more than 127 game units more than the leftmost or bottom most
vertice, will lead to the same grid as a different offset, but with more grid
data. The smallest possible offset, 0,0 is what ZenNode has at its basic
offset. DoomBSP from Id is set to 8,8. This minor safety margin is not needed.
It should be noted that due to bugs in the collission detection algorithms in
Doom, collissions are aparently slightly different when a line is exactly on
the edge of a grid. This is seen in the near-exit jump on Doom 2 map14 which
is a jump that is longer than expected.

Different offsets can line up the data in blockmap grids in different ways,
allowing for smaller or bigger total size. You can specify how many or which
offsets to use.

o=0 - ZenNode 0,0 offset BLOCKMAP.

This is the same offset configuration that ZenNode and probably many other
node builders use. Use this if you want a quickly built blockmap.

o=1 - DooMBSP / BSP 8,8 offset BLOCKMAP.

An offset of 8,8 is used by DoomBSP. This has a slightly higher chance than
0,0 to build bigger blockmaps due to an increased risk of a bigger grid. 

o=2 - Best of 36 offset combinations.

This is the default configuration for ZokumBSP. 36 offsets will be tested,
from 0 to 40 along both axises,in increments of 8. It will test (0,0), (0,8),
(0,16) ... (0,40), (8,0), (8,8), (8,16) ... (40,40)

This is a reasonable compromise between speed and thoroughness of offset
variations that will yield a smaller total result for most maps than a single
offset.

o=3 - Heuristic method to reduce from 65536 offsets.

In this confiuration, a lot more offsets will be tested, all the way from 0 to
127 for both X and Y. The Heuristic to decrease the time spent is to avoid
computing blockmaps if a combination of X and Y yields both an extra row of
grid and an extra column. Testing on av.wad and doom2.wad showed that this
yielded the same results as the complete range, at reduced run time. There
were plenty of examples of blockmaps with an added column or row still
producing the best result.

o=4 - Best of all 65536 offset combinations.

This is the same algorithm as approach as o=3, except without the heuristic. It
is possible, but highly unlikely, that this can give a better result than the
approach using the heuristic.

o=x,y - Specify specific offsets.

This setting allows you to select a custom set of offsets. This can be useful
if you are creating a map where a specific jump or some other blockmap related
artifact requires a specific setting. Aparently the collission detection
algorithm performs differently when lindefs are on the exact edge of a grid in
the blockmap.

07:05 'r' - Remove non-collidable lines from BLOCKMAP.
------------------------------------------------------

This option will try to remove some lines from the blockmap that one cannot
interact with. These are typically the outer edge of zero-height sectors which
are often used on the edges to create the illusion of a sky horizon. This
option can reduce the amount of lines and the size of the grid due to the
removal of the outermost lines in sky-sectors. Other lines that will be
dropped are two-sided lines where both sides of the line belong to the same
sector and the line is not a special line.

Unlike the similar algorithm found in the nodes code that removes segs,
textures do not matter.

07:06 's' - Subset compress BLOCKMAP.
-------------------------------------

This option will reuse a list in the blockmap if the list is a sub set of
another bigger list. This can save a nice amount of space in the list
defintions of the blockmap. The downside is that there is a risk of errors in
the collission detection when the player moves slowly. This is due to the
engine using a fautly algorithm when the player moves slowly. This is a fairly
rare occurance, and rarely noticable during normal play. The original engine
and IWAD data already has a faulty line 0 in all the lists, and this is not
considered a big problem in normal gaemplay.

07:07 'z' - Zero header configuration.
--------------------------------------

Id's DoomBSP would originally added a small 00 header in each list. This is a
bug. The engine does not parse this correctly, and sees it as a reference to
linedef 0. This increases the size of the blockmap and slows down the run time
speed. Additional linedefs not present in the block can in some rare cases
lead to faulty collission detection. This option controls whether blockmap
lists should have this header in some ports which will skip the first entry in
a blockmap list regardless of it being a 0-header or not.

The approach taken in MBF, to skip this redundant header, was a bad fix. The
fix should instead have been done in the node builders. Due to the fact that
skipping this header is needed for demo compatibility, many ports have this as
a togglable option in the code anyway.

Hopefully, ports will include a fix for this bug, but due to demo
compatibility, older versions will have to emulate this behaviour to properly
play back demos recorded with this bad optimization in place.

z=0 - No zero header.

This option produces a smaller blockmap. This works flawlessly, in fact
better, when maps are played in the original engine and Chocolate Doom. There
is however a known bug in some ports, like MBF, and those based on this port
where a poor optimization will skip this header without actually checking that
it is a zero-header. Such ports will have very faulty collission detection in
every area in the map. If one is aiming for newer ports where this has been
fixed, classic Doom or Chocolate Doom, this option is generally safe. There is
a fix for this header in newer versions of the Eternity Engine. GZdoom
generally ignores the blockmap, and should work fine with or without this
option.

z=1 - Conventional zero header.

This is the current default option due to the many ports with a faulty header
optimization. This adds about 2 bytes of overhead per list in the blockmap. It
is also needed for demo compatibility if one is using this to compress
blockmaps to make a map take up less space and use marginally less memory at
runtime.

z=2 - Zero footer.

This is an experimental feature used in testing. It will add the 00 as the
last entry in the linedef list. Doing this causes demos to desync. This is
proof that not only the entries, but also the order is important. This
parameter serves no other use.

07:08 'g' - Geometry simplification
-----------------------------------

This is an umbrella term for several optimizations that will alter the level
geometry by adding linedefs that only sohw up in collision detection and
flagging linedefs as rendering only, no collision detection.

Combining and changing the linedefs in a map in such a manner can result in a
blockmap that is smaller and possibly more efficient when playing the game,
due to fewer line collission detections required. 

These change will alter the level, and are not reversible with ZokumBSP.
Manually fixing these changes in an editor is possible, but may take some
time. When using this option at anything but level 0, turned off, it is
recommended that one specifies a seperate output file or has a backup of the
original map if further editing is planned.

This option can add linedefs to a map, increasing the size of this data
structure, with the goal of lowering the size of the usually more size
constrained blockmap. Although possible, it is highly unlikely that this will
add too many linedefs to a map. There is currently no check for this limit in
the code as of version 1.0.9.

g=0 - No simplification.

This is the default setting. This will not change the level geometry at all.

g=1 - Only if same sector.

This is a basic level of optimization. This will try to combine linedefs that
have the same sidedef sector data into longer linedefs that span the length of
two or more linedefs. This not only leads to smaller blockmaps, there are also
fewer lines that need to be checked during game play, resulting in a
marginally higher frame rate.

g=2 - Also 1-sided lines in different sectors.

This will add another level of optimization. I tries to find one-side walls in
a similar fashion even if they belong to different sectors. Geometrically a
one-sided wall can be seen as inifinitely tall, and which sector it belongs to
has no importance for the purpose of collission detection.

This has not been extensively tested, but should be a fairly safe optimization.

07:09 'a' - Build big 32bit BLOCKMAP
------------------------------------

This is experimental code, and is not fully functional. The plan is to make
this entry have a different name than the current name, BLOCKMAP in order to
allow for bigger blockmaps that will support bigger maps. 

Using this will override the check for a too big blockmap, allowing for a big
blockmap to be constructed. This option will only produce playable maps in
ports where the blockmap is ignored. Sine the specifications are not final,
nor the output correct, one cannot at this time expect any port to support
this option.

Section 08: Node builder
========================

Nothing has not changed much from the node code found in ZenNode. The changes
are related to the concept of having collission geometry seperate from the
rendered geometry though the use of 998 and 999.

08:01 'a' - Partition selection algorithm
-----------------------------------------

ZokumBSP offers the same 3 algoritms as ZenNode does.

a=1 - Minimize splits

This is the simplest and most basic algorithm. Although it is stated to
attempt to minimize splits, it may produce more segs than the other
algorithms. 

a=2 - Minimize BSP depth

This is the most complex of the two main algorithms, and will attempt to
produce a BSP tree that is not as deep as the ones made with the first
algorithm. Anecdotal evidence suggest that this algorithm can in fact produce
fewer splits for bigger maps. Try both if a reduced seg count is required.

a=3 - Minimize time

This lagorithm uses the same approach as algorithm 2, except it doesn't check
for as many combinations as a=2. It will pick the best out of 30. This makes
the nodes build much faster. The downside is that the better splits may not be
found every time, leading to a worse performing tree.

08:02 'q' - Don't display progress bar
--------------------------------------

This hides all the updates indicating the progress and depth of the BSP tree.
If one does not pay attention to the tool output, use this option to speed up
the node building process slightly.

08:03 'u' - Ensure all sub-sectors contain only 1 sector
--------------------------------------------------------

This will try to make sure that sub sectors only contain one sector. A sub
sector is a convex area that are used to construct a convex sector out of
concave sub sectors. This property is important when designing a 3d engine
since it allows for much faster rendering if all of the areas are convex.

08:04 'i' - Ignore non-visible lineDefs
---------------------------------------

This option is similar to a blockmap option that removes non-collidable lines
from the level geometry. It does however check for the presence of a middle
texture, since those need to be rendered even if a linedef has sidefs
belonging to the same sector.

Section 09: Reject builder
==========================

Only one thing has been changed from the reject builder code found in ZenNode.
A overflow was fixed by using a bigger integer type of variable, allowing
reject maps to be built for very big levels. It has been tested for reject
maps with over ten thousand sectors. When building reject maps this big, one
might have to use big blockmap support in order to compute the reject table.

09:01 'z' - Insert empty REJECT resource
----------------------------------------

This will insert a REJECT table where all the lookup values are zero. This
means the engine has to do all the checks during regular gameplay. This is a
very fast way to build a compliant reject lump for a map, but the performance
will be low if there are monsters or other things that perform line of sight
calculations. This is mostly used for testing a map in the game without having
to wait for a long time due to building a reject table.

09:02 'f' - Rebuild even if REJECT effects are detected
-------------------------------------------------------

This forces ZokumBSP to build a reject table even if the old one seems to
contain special effects. Reject special effects usually involve setting
certain entries to 1 instead of 0 to make monsters appear blind or fail to
attack from certain areas when the player is in a certain area.

09:03 'g' - Use graphs to reduce LOS calculations
-------------------------------------------------

Use this for a quicker built reject table. The idea is that if a sector A
cannot see into sector B at all, then any sector where the line of sight has
to go through sector B will also not see into sector A.

09:04 'm{b}' - Process RMB option file (.rej)
---------------------------------------------

This allows ZokumBSP to use the same kind of .rej files that RMB supports in
order to have similar special effects applied.

Section 10: Other options
=========================

10:01 't' - Test mode, do not write data to disk
------------------------------------------------

Section 11: Compatibility
=========================

The goal is to have a nodebuilder that is highly compatible with all the
classic Doom engine based games and vanilla compatible source ports.

11:01 Heretic
-------------

Geometry simplification may not work correctly with Heretic due to different
linedef types than Doom.

11:02 Hexen
-----------

Geometry simplification may not work correctly with Hexen due to different
linedef types than Doom.

11:03 BOOM compatibility
------------------------

Generic raising stairs and similar specials will be autodetected, disabling
the removal of some seemingly unneeded collision lines in the blockmap.

11:04 32 and 64 bit
-------------------

ZokumBSP was developed on a 64bit system, and has not been tested on 32bit
systems. Hopefully this will be tested in the future to ensure a wide range of
systems can run this tool. 

The reject pass of the tool utilizes a 64bit integer in a non-time-sensitive
part of the code to avoid an overflow found in ZenNode.

11:05 Operating systems
-----------------------

* Linux *

ZokumBSP was primarily developed on Linux, using gcc, and should hopefully
work well on most distributions. ZokumBSP was developed on a x86 64bit system,
and has not yet been tested on a 32 bit system. 

* Windows *

The Windows versions are usually mingw static compiles built on a Windows
machine from the same source tree as the Linux version.

It's usually compiled with -O2 and no special architecture specific switches,
but will most likely require a semi modern win32 platform. Only Windows 7 has
been tested extensively. So far no one has reported problems with
incompatibilities, so it's likely one can assume it works well on other
versions of this operating system.

* BSD *

No BSD builds have been tested.

* DOS *

No DOS ports have been tested. ZenNode supported DOS builds, and there hasn't
been any changes to the code base that would make this an impossible feat
compiler-wise.

Section 12: Usage together with other tools
===========================================

12:01 GZ Doom Builder
---------------------

ZokumBSP is a drop in replacement for ZenNode, so simply copying your current
settings for ZenNode should suffice.

Section 13: Other resources
===========================

If you are interested in more information about ZokumBSP and the Doom specs,
try the following resources:

Project web site: http://doom2.net/zokum/zokumbsp
Github: https://github.com/zokum-no/zokumbsp
Wiki: https://doomwiki.org
IRC: #nightmare

Section 14: Changelog
=====================

The changelog is kept in a seperate file, 'changelog.txt'. 

Section 15: Acknowledgements
============================

Marc Roussaeu            - ZenNode
Brad Specer              - Web site layout and feedback
Dew                      - Feedback and bug testing
Anders Johnsen           - Feedback and suggestions
Andrew 'Linguica' Stine  - Feedback and information
x38_ViTa_38              - Spell checking
Eternity Engine          - Adding compatibility fixes and testing
#nightmare               - Feedback and support
#d****                   - Feedback and information
#noteternityenginere...  - Feedback and inforamtion

Section 16: Other node builders
===============================

16:01 Regular node builders
---------------------------

* BSP *
http://games.moria.org.uk/doom/bsp/

* DoomBSP / IdBSP *
https://www.doomworld.com/idgames/utils/level_edit/node_builders/ibsp102d

* ZDBSP *
https://zdoom.org/wiki/ZDBSP

* ZenNode *
http://www.mrousseau.org/programs/ZenNode/

16:02 GL Node builders
----------------------

* glBSP *
http://glbsp.sourceforge.net/

* ZDBSP *
https://zdoom.org/wiki/ZDBSP
